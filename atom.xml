<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>元宝爱吃肉</title>
  <subtitle>就算不能全栈，也要全沾！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-05T05:34:04.905Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>原浩(Mouse·Yuan)</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用servlet完成下载（解决中文乱码）</title>
    <link href="http://yoursite.com/2017/07/04/article7/"/>
    <id>http://yoursite.com/2017/07/04/article7/</id>
    <published>2017-07-04T09:21:02.000Z</published>
    <updated>2017-07-05T05:34:04.905Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用servlet完成下载文件"><a href="#使用servlet完成下载文件" class="headerlink" title="使用servlet完成下载文件"></a>使用servlet完成下载文件</h1><h2 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h2><pre><code>&lt;a href=&quot;/web14/download?filename=美女.jpg&quot;&gt;美女.jpg&lt;/a&gt;
</code></pre><h2 id="书写核心servlet"><a href="#书写核心servlet" class="headerlink" title="书写核心servlet"></a>书写核心servlet</h2><pre><code>package com.itheima.line;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.URLEncoder;

import javax.servlet.ServletException;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import sun.management.resources.agent;
import sun.misc.BASE64Encoder;
/**
 * 下载Servlet 解决下载文件名乱码 
  * @author hao.yuan
 * @date 2017年7月4日
 * @version V1.0    
 */
public class downloadServlet extends HttpServlet {

public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    // 获取要下载的文件的名称
    // fileName如果是中文，要解决乱码
    String fileName = request.getParameter(&quot;filename&quot;);
    fileName = new String(fileName.getBytes(&quot;ISO8859-1&quot;),&quot;UTF-8&quot;);//美女.jpg
    // 获取请求头中User-Agent
    String agent = request.getHeader(&quot;User-Agent&quot;);
    // 根据不同的客户端进行不同的编码 
    String filenameEncoder = &quot;&quot;;
    if (agent.contains(&quot;MSIE&quot;)) {
        // IE浏览器
        filenameEncoder = URLEncoder.encode(fileName, &quot;utf-8&quot;);
        filenameEncoder = fileName.replace(&quot;+&quot;, &quot; &quot;);
    } else if (agent.contains(&quot;Firefox&quot;)) {
        // 火狐浏览器
        BASE64Encoder base64Encoder = new BASE64Encoder();
        filenameEncoder = &quot;=?utf-8?B?&quot; + base64Encoder.encode(fileName.getBytes(&quot;utf-8&quot;)) + &quot;?=&quot;;
    } else {
        // 其它浏览器
        filenameEncoder = URLEncoder.encode(fileName, &quot;utf-8&quot;);
    }    
    // 要下载文件的类型 - 客户端通过文件的MIME类型区别类型
    response.setContentType(this.getServletContext().getMimeType(fileName));
    // 告诉客户端该文件不是直接解析，而是以附件形式打开
    response.setHeader(&quot;Content-Disposition&quot;, &quot;attachment;filename=&quot; + filenameEncoder);
    // 获取文件的绝对路径
    String path = this.getServletContext().getRealPath(&quot;download/&quot; + fileName);
    // 获得该文件的输入流
    InputStream in = new FileInputStream(path);
    // 获取输出流
    ServletOutputStream out = response.getOutputStream();
    // 文件拷贝模板
    int len = 0;
    byte[] buffer = new byte[1024];
    while ((len = in.read(buffer)) &gt; 0) {
        out.write(buffer, 0, len);
    }
    in.close();
    out.close();

}
public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    doGet(request, response);
}
}
</code></pre><p> 注意</p>
<blockquote>
<p>1 资源文件例如美女,jpg存放在webContent/download/美女.jpg<br>2下载要设置头，setHeader，setContentType<br>3根据浏览器不同如IE是UTF-8编码，火狐是Base64编码，所以要兼容，解决乱码问题。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用servlet完成下载文件&quot;&gt;&lt;a href=&quot;#使用servlet完成下载文件&quot; class=&quot;headerlink&quot; title=&quot;使用servlet完成下载文件&quot;&gt;&lt;/a&gt;使用servlet完成下载文件&lt;/h1&gt;&lt;h2 id=&quot;创建页面&quot;&gt;&lt;a href
    
    </summary>
    
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>servlet入门小案例</title>
    <link href="http://yoursite.com/2017/07/04/article6/"/>
    <id>http://yoursite.com/2017/07/04/article6/</id>
    <published>2017-07-04T03:23:59.000Z</published>
    <updated>2017-07-05T05:35:31.459Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用servlet完成用户登录"><a href="#使用servlet完成用户登录" class="headerlink" title="使用servlet完成用户登录"></a>使用servlet完成用户登录</h1><h2 id="创建用户登录页面"><a href="#创建用户登录页面" class="headerlink" title="创建用户登录页面"></a>创建用户登录页面</h2><pre><code>&lt;form action=&quot;/web_13/login&quot; method=&quot;post&quot;&gt;
    &lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt; &lt;br&gt;
    &lt;input type=&quot;password&quot; name=&quot;password&quot;/&gt; &lt;br&gt;
    &lt;input type=&quot;submit&quot; value=&quot;登录&quot;/&gt;
&lt;/form&gt;
</code></pre><h2 id="编写servlet"><a href="#编写servlet" class="headerlink" title="编写servlet"></a>编写servlet</h2><pre><code>   package com.itheima.login;

import java.io.IOException;
import java.sql.SQLException;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.dbutils.QueryRunner;
import org.apache.commons.dbutils.handlers.BeanHandler;

import com.itheima.domain.User;
import com.itheima.utils.DataSourceUtils;
/**
  * 登录控制servlet
 * @author hao.yuan
 * @date 2017年7月4日
 * @version V1.0
 */
public class LoginServlet extends HttpServlet {
@Override
public void init() throws ServletException {
    // 在Servletcontext雨中存一个书库count
    this.getServletContext().setAttribute(&quot;count&quot;, 0);
}
public void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
//        response.getWriter().write(&quot;hello haohao...&quot;);
    //1 获取前台的数据
    String name = request.getParameter(&quot;name&quot;);
    String password = request.getParameter(&quot;password&quot;);
    // 2. 通过数据库校验 name 和 password 使用c3p0连接池 dbutils操作sql
    QueryRunner qr = new QueryRunner(DataSourceUtils.getDataSource());
    String sql = &quot;select * from user where name = ? and password = ?&quot;;
    User user = null ;
    try {
         user = qr.query(sql, new BeanHandler&lt;User&gt;(User.class), name,password);
    } catch (SQLException e) {
        e.printStackTrace();
    }
    if(user !=null){
        // 用户登录成功 
        Integer count = (Integer) this.getServletContext().getAttribute(&quot;count&quot;);
        count++;
        response.getWriter().write(user.toString() + &quot;---------you are success person:&quot;+count);
        this.getServletContext().setAttribute(&quot;count&quot;, count);
    }else{
        response.getWriter().write(&quot;sorry login fail!&quot;);
    }
}

public void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    doGet(request, response);
}
}`
</code></pre><h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><pre><code>1.表单提交 form action跳转servlet
2.servlet中使用getParamater获取参数
3.servlet作为域对象，使用this.getServletContext().setAttribute(&quot;&quot;,&quot;&quot;)，getAttribute(&quot;&quot;)记录用户登录次数。
4.使用c3p0连接池连接mysql，使用DBUtils完成查询操作。
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;使用servlet完成用户登录&quot;&gt;&lt;a href=&quot;#使用servlet完成用户登录&quot; class=&quot;headerlink&quot; title=&quot;使用servlet完成用户登录&quot;&gt;&lt;/a&gt;使用servlet完成用户登录&lt;/h1&gt;&lt;h2 id=&quot;创建用户登录页面&quot;&gt;&lt;a 
    
    </summary>
    
    
      <category term="servlet" scheme="http://yoursite.com/tags/servlet/"/>
    
  </entry>
  
  <entry>
    <title>javscript实现可拖拽的盒子</title>
    <link href="http://yoursite.com/2017/05/27/new-article5/"/>
    <id>http://yoursite.com/2017/05/27/new-article5/</id>
    <published>2017-05-27T02:00:30.000Z</published>
    <updated>2017-05-27T02:05:53.983Z</updated>
    
    <content type="html"><![CDATA[<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head lang=&quot;en&quot;&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;&lt;/title&gt;
&lt;style&gt;
    * {
        margin: 0;
        padding: 0;
    }

    .nav {
        height: 30px;
        background: #036663;
        border-bottom: 1px solid #369;
        line-height: 30px;
        padding-left: 30px;
    }

    .nav a {
        color: #fff;
        text-align: center;
        font-size: 14px;
        text-decoration: none;

    }

    .d-box {
        width: 400px;
        height: 300px;
        border: 5px solid #eee;
        box-shadow: 2px 2px 2px 2px #666;
        position: absolute;
        top: 40%;
        left: 40%;
    }

    .hd {
        width: 100%;
        height: 25px;
        background-color: #7c9299;
        border-bottom: 1px solid #369;
        line-height: 25px;
        color: white;
        cursor: move;
    }

    #box_close {
        float: right;
        cursor: pointer;
    }
&lt;/style&gt;
&lt;script src=&quot;animate.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
    window.onload = function () {
        //需求：在指定位置按住鼠标左键移动对话框。
        //分析：鼠标按下，触动事件，移动在更换对话框的位置。
        //鼠标按下onmousedown   鼠标弹起:onmouseup   鼠标移动onmousemove
        //步骤：
        //1.老三步和新五步
        //2.把鼠标的坐标赋值给对话框。
        var box = document.getElementById(&quot;d_box&quot;);
        var drop = document.getElementById(&quot;drop&quot;);
        //1.老三步和新五步
        //先按下，在移动触动此事件
        drop.onmousedown = function (event) {
            //获取鼠标在盒子中的坐标，将来移动的时候减去保证鼠标在盒子的指定位置
            event = event || window.event;
            var pagex = event.pageX || scroll().left + event.clientX;
            var pagey = event.pageY || scroll().top + event.clientY;
            var x = pagex - box.offsetLeft;
            var y = pagey - box.offsetTop;
            document.onmousemove = function (event) {
                //2.把鼠标的坐标赋值给对话框。
                event = event || window.event;
                var xx = event.pageX || scroll().left + event.clientX;
                var yy = event.pageY || scroll().top + event.clientY;
                //二次操作鼠标位置  减去鼠标在盒子中的坐标
                xx = xx - x;
                yy = yy - y;
                //给box赋值
                box.style.left = xx+&quot;px&quot;;
                box.style.top = yy+&quot;px&quot;;
                //禁止文本选中（选中后取消）
                window.getSelection ? window.getSelection().removeAllRanges() : document.selection.empty();
            }
        }
        //事件解绑
        drop.onmouseup = function () {
            //解绑
            document.onmousemove = null;
        }
    }
&lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;
&lt;!--顶部注册部分，无用--&gt;
&lt;div class=&quot;nav&quot;&gt;
&lt;a href=&quot;javascript:;&quot; id=&quot;register&quot;&gt;注册信息&lt;/a&gt;
&lt;/div&gt;
&lt;!--我们移动的对话框--&gt;
&lt;div class=&quot;d-box&quot; id=&quot;d_box&quot;&gt;
&lt;div class=&quot;hd&quot; id=&quot;drop&quot;&gt;
    &lt;i&gt;注册信息 (可以拖拽)&lt;/i&gt;
    &lt;span id=&quot;box_close&quot;&gt;【关闭】&lt;/span&gt;
&lt;/div&gt;
&lt;div class=&quot;bd&quot;&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;/body&gt;
&lt;/html&gt;
</code></pre><p><img src="http://img.blog.csdn.net/20170228105643731?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY0OTkyNDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
]]></content>
    
    <summary type="html">
    
      &lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head lang=&amp;quot;en&amp;quot;&amp;gt;
&amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt;
&amp;lt;title&amp;gt;&amp;lt;/titl
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>使用Jquery动态创建表格</title>
    <link href="http://yoursite.com/2017/05/27/new-article4/"/>
    <id>http://yoursite.com/2017/05/27/new-article4/</id>
    <published>2017-05-27T01:54:24.000Z</published>
    <updated>2017-05-27T02:06:57.256Z</updated>
    
    <content type="html"><![CDATA[<p>知识点：<br>使用jq中html()创建元素，append()添加节点，remove()删除节点，类方法：addClass()和removeClass()方法等</p>
<pre><code>&lt;!DOCTYPE html&gt;
&lt;html lang=&quot;en&quot;&gt;
&lt;head&gt;
&lt;meta charset=&quot;UTF-8&quot;&gt;
&lt;title&gt;Title&lt;/title&gt;
&lt;style&gt;
    * {
        padding: 0;
        margin:0;
    }
    input {
        width:100px;
        height:30px;
        /*cursor: pointer;*/
        /*font:700 14px/30px &quot;simsun&quot;;*/
        border-radius: 5px;
    }
    table {
        border-collapse: collapse;
        margin: 10px 0;
    }
    table tr {
        border: 1px solid #ddd;
    }
    table td,table th {
        padding:5px;
        text-align: center;
    }
    table th{
        background-color: #8af6ff;
    }
    .mask-color {
        background-color: rgba(0,0,0,0.4);
    }
    #mask{
        width: 300px;
        height: 250px;
        box-shadow: 2px 2px 2px 2px #ccc;
        position: absolute;
        left: 50%;
        top:50%;
        margin-left: -150px;
        margin-top: -125px;
    }
    #mask h2 {
        color: #c30230;
        font-weight: 700;
        background-color: #ddd;
        height:20px;
        line-height: 20px;
        font-size: 16px;
    }
    #mask input {
        margin: 10px 0;
    }
&lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;div id=&quot;wrapper&quot;&gt;
    &lt;input type=&quot;button&quot; value=&quot;添加数据&quot;&gt;
    &lt;table&gt;
        &lt;thead&gt;
            &lt;tr&gt;
                &lt;th&gt;课程名称&lt;/th&gt;
                &lt;th&gt;所属学院&lt;/th&gt;
                &lt;th&gt;已学会&lt;/th&gt;
            &lt;/tr&gt;
        &lt;/thead&gt;
        &lt;tbody&gt;
            &lt;tr&gt;
                &lt;td&gt;JAVASCRIPT&lt;/td&gt;
                &lt;td&gt;前端移动开发学院&lt;/td&gt;
                &lt;td class=&quot;get&quot;&gt;GET&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;HTML5&lt;/td&gt;
                &lt;td&gt;前端移动开发学院&lt;/td&gt;
                &lt;td class=&quot;get&quot;&gt;GET&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;CSS3&lt;/td&gt;
                &lt;td&gt;前端移动开发学院&lt;/td&gt;
                &lt;td class=&quot;get&quot;&gt;GET&lt;/td&gt;
            &lt;/tr&gt;
            &lt;tr&gt;
                &lt;td&gt;BOOTSTRAP&lt;/td&gt;
                &lt;td&gt;前端移动开发学院&lt;/td&gt;
                &lt;td class=&quot;get&quot;&gt;GET&lt;/td&gt;
            &lt;/tr&gt;
        &lt;/tbody&gt;
    &lt;/table&gt;
&lt;/div&gt;
&lt;div id=&quot;mask&quot; style=&quot;display: none&quot;&gt;
    &lt;h2&gt;添加数据 &lt;span style=&quot;float: right;margin-right:10px;display: inline-block;width: 10px;height: 20px&quot;&gt;X&lt;/span&gt;&lt;/h2&gt;

    &lt;div&gt;
        &lt;span&gt;课程名称：&lt;/span&gt; &lt;input id=&quot;name&quot; type=&quot;text&quot; placeholder=&quot;请输入课程名称！&quot; style=&quot;width: 150px;height: 30px;&quot;&gt;
    &lt;/div&gt;
    &lt;div&gt;
        &lt;span&gt;所属学院：&lt;/span&gt; &lt;input id=&quot;school&quot; type=&quot;text&quot; value=&quot;JAVA学院&quot; style=&quot;width: 150px;height: 30px;&quot;&gt;
    &lt;/div&gt;
    &lt;div style=&quot;text-align: center&quot;&gt;
        &lt;button style=&quot;width: 150px;height: 25px;text-align: center;line-height: 25px;border: 0;&quot;&gt;添加&lt;/button&gt;
    &lt;/div&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
&lt;script src=&quot;jquery-1.11.1.js&quot;&gt;&lt;/script&gt;
&lt;script&gt;
$(&quot;input[type=&apos;button&apos;]&quot;).click(function(){
    $(&quot;#mask&quot;).fadeIn(1000);
    $(&quot;body&quot;).addClass(&quot;mask-color&quot;);
});
$(&quot;h2 span&quot;).click(function(){
    $(&quot;#mask&quot;).fadeOut(1000);
    $(&quot;body&quot;).removeClass(&quot;mask-color&quot;);
});

$(&quot;#mask button&quot;).click(function(){
    var name = $(&quot;#name&quot;).val();
    var school = $(&quot;#school&quot;).val();
    if(name == &quot;&quot; || name == null){
        alert(&quot;请输入课程名称！&quot;);
        return;
    }
    $(&quot;#mask&quot;).fadeOut();
    $(&quot;body&quot;).removeClass(&quot;mask-color&quot;);
    var tr = $(&quot;&lt;tr&gt;&lt;/tr&gt;&quot;);
    //赋值
    tr.html(&apos;&lt;td&gt;&apos;+name+&apos;&lt;/td&gt;&lt;td&gt;&apos;+school+&apos;&lt;/td&gt;&lt;td class=&quot;get&quot;&gt;GET&lt;/td&gt;&apos;);
    //在房间tbody中
    $(&quot;tbody&quot;).append(tr);

    //BUG：新产生的tr没有事件绑定 坑！！
    tr.click(function(){
        $(this).remove();
    })
    $(&quot;#name&quot;).val(&quot;&quot;);
});

$(&quot;.get&quot;).click(function(){
//        alert(0);
    $(this).parent(&quot;tr&quot;).remove();
})
&lt;/script&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;知识点：&lt;br&gt;使用jq中html()创建元素，append()添加节点，remove()删除节点，类方法：addClass()和removeClass()方法等&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html lang=&amp;quo
    
    </summary>
    
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>使用CSS3实现消息框</title>
    <link href="http://yoursite.com/2017/05/27/new-article3/"/>
    <id>http://yoursite.com/2017/05/27/new-article3/</id>
    <published>2017-05-27T01:51:05.000Z</published>
    <updated>2017-05-27T02:06:09.974Z</updated>
    
    <content type="html"><![CDATA[<p>原理：使用css3中的transform：rotate旋转，通过定位改变位置。</p>
<pre><code>.out{
        width: 300px;
        height: 150px;
        background-color: pink;
        margin:200px;
        position: relative;
    }

    .out::before{
        content:&quot;&quot;;
        position: absolute;
        width: 50px;
        height: 50px;
        background-color: pink;
        transform:rotate(45deg);
        left:40%;
        top:-15px;

    }
     &lt;div class=&quot;out&quot;&gt;
     &lt;/div&gt;
</code></pre><p>效果图：<br><img src="http://img.blog.csdn.net/20170318222718529?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY0OTkyNDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p><strong>根据自己的需求改变left top bottom right的值可以实现小三角的位置。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;原理：使用css3中的transform：rotate旋转，通过定位改变位置。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;.out{
        width: 300px;
        height: 150px;
        background-color: pink;
    
    </summary>
    
    
      <category term="css3" scheme="http://yoursite.com/tags/css3/"/>
    
  </entry>
  
  <entry>
    <title>javascript对原型的理解</title>
    <link href="http://yoursite.com/2017/05/26/my-article2/"/>
    <id>http://yoursite.com/2017/05/26/my-article2/</id>
    <published>2017-05-26T10:02:50.000Z</published>
    <updated>2017-05-26T10:06:00.902Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是原型"><a href="#1-什么是原型" class="headerlink" title="1.什么是原型"></a>1.什么是原型</h2><blockquote>
<p>在构造函数创建出来的时候，系统会默认的帮构造函数创建并关联一个神秘的对象，这个对象就是原型，原型默认的是一个空的对象。</p>
</blockquote>
<h2 id="2-原型的作用"><a href="#2-原型的作用" class="headerlink" title="2.原型的作用"></a>2.原型的作用</h2><blockquote>
<p>原型中的属性和方法，可以被使用该构造函数创建出来的对象所使用。</p>
</blockquote>
<h2 id="3-如何访问构造函数中的原型"><a href="#3-如何访问构造函数中的原型" class="headerlink" title="3.如何访问构造函数中的原型"></a>3.如何访问构造函数中的原型</h2><blockquote>
<p>构造函数.prototype</p>
</blockquote>
<h2 id="4-如何给原型对象添加属性和方法"><a href="#4-如何给原型对象添加属性和方法" class="headerlink" title="4.如何给原型对象添加属性和方法"></a>4.如何给原型对象添加属性和方法</h2><blockquote>
<p>使用对象的动态特性</p>
</blockquote>
<h2 id="5-原型链"><a href="#5-原型链" class="headerlink" title="5.原型链"></a>5.原型链</h2><blockquote>
<p>对象的原型指向原型对象，形成原型链</p>
</blockquote>
<pre><code>  //constructor: 原型对象内的一个属性，指向该原型对象相关联的构造函数
   //\__proto__:原型对象对象中的属性,可以使用 对象.__proto__ 去访问原型对象

&lt;script&gt;
    // 动物 --》 人 --》老师 --》坏老师
    function Animal(){
        this.gender = &quot;male&quot;;
    }
    Human.prototype = new Animal();
    Human.prototype.constructor = Human;
    function Human(){
        this.actionWay = &quot;走路&quot;;
    }
    Teacher.prototype = new Human();
    Teacher.prototype.constructor = Teacher;
    function Teacher(){
        this.skill = &quot;教书&quot;;
    }
    BadTeacher.prototype = new Teacher();
    BadTeacher.prototype.constructor = BadTeacher;
    function BadTeacher(){
        this.name = &quot;chris&quot;;
    }
    var t = new BadTeacher();
    console.log(t);
    console.log(t.__proto__);
    console.log(t.__proto__.__proto__);
    console.log(t.__proto__.__proto__.__proto__);
    console.log(t.__proto__.__proto__.__proto__.__proto__); // object
    console.log(t.__proto__.__proto__.__proto__.__proto__.__proto__); // 对象的原型还是一个对象 所以是Object 不是null
    console.log(t.__proto__.__proto__.__proto__.__proto__.__proto__.__proto__); // null
&lt;/script&gt;
</code></pre><p>结果：<br><img src="http://img.blog.csdn.net/20170503135435084?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcXFfMjY0OTkyNDc=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="这里写图片描述"></p>
<p>总结：</p>
<blockquote>
<p>当使用对象去访问属性和方法的时候，会首先在对象自己内部进行查找，如果找到了，就直接使用。如果没有找到，就去原型中查找，查找到之后，使用。如果原型中还没有， 如果是属性，就是undefined，如果是方法，就报错。</p>
</blockquote>
<pre><code>// 定义构造函数
   function Person(name, status) {
        this.name = name;
        this.status = status;
        this.act = function () {
            console.log(&quot;演戏&quot;);
        };
        this.exercise = function () {
            console.log(&quot;就不强身健体，就要保卫祖国&quot;);
        }
    }
    // 初始化 创建构造函数
var p = new Person(&quot;xyz&quot;,&quot;single&quot;);
// 添加原型方法
Person.prototype.exercise = function () {
        console.log(&quot;强身健体，保卫祖国&quot;);
    }
// 该构造函数创建出来的对象访问原型方法
   p.exercise();
  console.log(Person.prototype); // Object
  console.log(p.prototype);  // undefined
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是原型&quot;&gt;&lt;a href=&quot;#1-什么是原型&quot; class=&quot;headerlink&quot; title=&quot;1.什么是原型&quot;&gt;&lt;/a&gt;1.什么是原型&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;在构造函数创建出来的时候，系统会默认的帮构造函数创建并关联一个神秘的对象，
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>简单认识闭包</title>
    <link href="http://yoursite.com/2017/05/25/new-article/"/>
    <id>http://yoursite.com/2017/05/25/new-article/</id>
    <published>2017-05-25T08:06:48.000Z</published>
    <updated>2017-05-25T08:24:14.694Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-什么是闭包"><a href="#1-什么是闭包" class="headerlink" title="1.什么是闭包"></a>1.什么是闭包</h2><blockquote>
<p>一个具有封闭的对外不公开的，包裹结构，或空间，js中的闭包就是函数。</p>
</blockquote>
<h2 id="2-闭包原理"><a href="#2-闭包原理" class="headerlink" title="2.闭包原理"></a>2.闭包原理</h2><blockquote>
<p>闭包的原理就是作用域访问原则，上级作用域无法直接访问下级作用域中的变量。</p>
</blockquote>
<h2 id="3-闭包要解决什么问题？"><a href="#3-闭包要解决什么问题？" class="headerlink" title="3.闭包要解决什么问题？"></a>3.闭包要解决什么问题？</h2><blockquote>
<p>闭包内的数据不允许外界访问，要解决的问题就是间接访问该数据。</p>
</blockquote>
<h2 id="4-使用闭包获取多个数据"><a href="#4-使用闭包获取多个数据" class="headerlink" title="4. 使用闭包获取多个数据"></a>4. 使用闭包获取多个数据</h2><pre><code>function foo(){
    var name = &apos;张国荣&apos;;
    var age = 18;
    return function(){
        return name + &quot;:&quot; + age;
    }
}
var getName = foo();
console.log(getName());
</code></pre><p>或者返回数组形式：</p>
<pre><code>function foo(){
    var name = &apos;张国荣&apos;;
    var age = 18;
    return [
    function(){
        return name;
    },
    function(){
        return age;
    }
    ]
}
var getName = foo();
console.log(getName[0]());
console.log(getName[1]());
</code></pre><p>或者使用对象获取：</p>
<pre><code>function foo(){
    var name = &apos;张国荣&apos;;
    var age = 18;
    return {
        getName:function(){
            return name;
        },
        getAge:function(){
            return age;
        }
    }
}
var obj = foo();
console.log(obj.getName());
console.log(obj.getAge());
</code></pre><h2 id="5-使用对象返回多个方法来获取并设置值"><a href="#5-使用对象返回多个方法来获取并设置值" class="headerlink" title="5.使用对象返回多个方法来获取并设置值"></a>5.使用对象返回多个方法来获取并设置值</h2><pre><code>function foo(){
    var name = &apos;hehe&apos;;
    var gender = &apos;male&apos;;
    return {
        getName:function(){
            return name;
        },
        setName:function(value){
            name = value;
            return name;
        },
        getGender:function(){
            return gender;
        },
        setSpeed:function(value){
            speed = value;
            return speed;
        }
    }
}
var obj = foo();
console.log(obj.getName());
console.log(obj.getGender());
obj.setName(&quot;xixi&quot;);
console.log(obj.getName());
</code></pre><h2 id="6-闭包的作用"><a href="#6-闭包的作用" class="headerlink" title="6.闭包的作用"></a>6.闭包的作用</h2><blockquote>
<p>作用：<br>1 可以通过闭包返回的函数或者方法，来修改函数内部的数据<br>2 创建一个私有的空间，保护数据<br>3 外部想要访问数据，只能通过函数提供的方法<br>4 在提供的方法中，我们可以设置一些校验逻辑，让数据变得更加安全</p>
</blockquote>
<pre><code>function foo(){
        var name = &quot;潘明&quot;;
        var badLevel = -1000000000000000000000000000000000;
        return {
            getName: function () {
                return name;
            },
            setName: function (value) {
                name = value;
                return name;
            },
            getBadLevel:function(){
                return badLevel;
            },
            setBadLevel:function (value) {
                //在函数外部想要修改数据
                //只能通过函数内部的方法
                //我们可以在函数内部定义的这个方法里
                //设置安全措施，校验之类的操作
                //可以保证系统的安全性和稳定性
                if(value &gt; 0 ){
                    throw &quot;你敢说我坏！！！&quot;;
                }

                badLevel = value;
                return badLevel;
            }
        }
    }
</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-什么是闭包&quot;&gt;&lt;a href=&quot;#1-什么是闭包&quot; class=&quot;headerlink&quot; title=&quot;1.什么是闭包&quot;&gt;&lt;/a&gt;1.什么是闭包&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个具有封闭的对外不公开的，包裹结构，或空间，js中的闭包就是函数。&lt;/p
    
    </summary>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
</feed>
